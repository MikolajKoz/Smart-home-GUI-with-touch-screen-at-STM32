/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef KUCHENKAVIEWBASE_HPP
#define KUCHENKAVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/kuchenka_screen/kuchenkaPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>

class kuchenkaViewBase : public touchgfx::View<kuchenkaPresenter>
{
public:
    kuchenkaViewBase();
    virtual ~kuchenkaViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void selectPalnik1()
    {
        // Override and implement this function in kuchenka
    }

    virtual void selectPalnik2()
    {
        // Override and implement this function in kuchenka
    }

    virtual void selectPalnik3()
    {
        // Override and implement this function in kuchenka
    }

    virtual void selectPalnik4()
    {
        // Override and implement this function in kuchenka
    }

    virtual void palnikMocUp()
    {
        // Override and implement this function in kuchenka
    }

    virtual void palnikMocDown()
    {
        // Override and implement this function in kuchenka
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box tlo;
    touchgfx::Button goBack;
    touchgfx::TextAreaWithOneWildcard mocPalnika;
    touchgfx::Button mocDown;
    touchgfx::Button mocUp;
    touchgfx::ToggleButton palnik1;
    touchgfx::ToggleButton palnik4;
    touchgfx::ToggleButton palnik3;
    touchgfx::ToggleButton palnik2;

    /*
     * Wildcard Buffers
     */
    static const uint16_t MOCPALNIKA_SIZE = 2;
    touchgfx::Unicode::UnicodeChar mocPalnikaBuffer[MOCPALNIKA_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<kuchenkaViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // KUCHENKAVIEWBASE_HPP
